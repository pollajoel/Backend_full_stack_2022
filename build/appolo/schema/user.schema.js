"use strict";

var _apolloServerExpress = require("apollo-server-express");

var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

module.exports = (0, _apolloServerExpress.gql)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n\n    type AuthPayload {\n        token: String\n        user: User\n    }\n    \n    type User {\n        id: ID!\n        name: String!\n        email: String!\n        firstname: String\n        password: String\n        is_admin: Boolean\n        phone: String\n        postal_code: String\n        city: String\n        profil_image: String\n        userrole:Userrole\n    }\n\n\n    input userInput {\n        name: String!\n        email: String!\n        firstname: String!\n        password: String!\n        is_admin: Boolean!\n        phone: String\n        postal_code: String\n        city: String\n        profil_image: String\n       \n    }\n\n\n    input updateuserInput{\n        name: String\n        email: String\n        firstname: String\n        password: String\n        is_admin: Boolean\n        phone: String\n        postal_code: String\n        city: String\n        profil_image: String\n    }\n\n    type userTokenInput {\n        token: String!\n        user : User!\n    }\n\n   \n\n    extend type Query {\n        users: [User]\n        user(id: ID!): User\n\t\tgetMe: User\n     }\n\n    extend type Mutation{\n        createUser(registuser:userInput!):User\n        updateUser(id:ID!, updtateUserinput: updateuserInput!):User\n        deleteUser(id:ID!):Int\n        authentification(email:String!, password:String!):userTokenInput\n    }\n\n\n\n\n"])));